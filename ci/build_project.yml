image: xfce/xfce-build:latest

# Variables not defined here or at job level are supposed to be defined in each
# project as CI/CD variables, to enable optional jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Set overall pipeline rules to avoid duplicated pipelines
# https://docs.gitlab.com/ee/ci/yaml/index.html#exclude-jobs-with-rules-from-certain-pipelines
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

stages:
  - analysis
  - build
  - distcheck
  - release

clang-format:
  rules:
    # The job is only run for merge requests and if there is a .clang-format
    # file at the repository root
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - .clang-format
  stage: analysis
  allow_failure: true
  interruptible: true
  script:
    # The job fails if clang-format's analysis of the merge request diff produces
    # non-empty output. In this case, the suggested format corrections are displayed
    # in the job output and can be downloaded for one week.
    - 'git diff -U0 --no-color "${CI_MERGE_REQUEST_DIFF_BASE_SHA:-.}" | clang-format-diff -p1 > format-diff.log || {
         cat format-diff.log;
         exit 1;
       }'
  artifacts:
    paths:
      - format-diff.log
    when: on_failure
    expire_in: 1 week

translations:
  extends: .translation
  stage: build
  script:
    #  Could validate translations, but for now just pass
    - "true"

build-gcc:
  variables:
    CC: "gcc"
    CONFIGURE_FLAGS: "--enable-debug=werror"
  extends: .build

build-clang:
  variables:
    CC: "clang"
    CONFIGURE_FLAGS: "--enable-debug=werror"
  extends: .build

build-no-x11:
  variables:
    CONFIGURE_FLAGS: "--enable-debug=werror --disable-x11"
  extends: .build
  rules:
    - if: $X11_FEATURE == null
      when: never
    - !reference [.configure, rules]

build-no-wayland:
  variables:
    CONFIGURE_FLAGS: "--enable-debug=werror --disable-wayland"
  extends: .build
  rules:
    - if: $WAYLAND_FEATURE == null
      when: never
    - !reference [.configure, rules]

distcheck:
  variables:
    CONFIGURE_FLAGS: "--disable-debug"
  extends: .distcheck
  stage: distcheck
  interruptible: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
      # We have to reference .configure rules to import the rules which skip build
      # when only po/*.po are modified
    - !reference [.configure, rules]

release:
  extends: .distcheck
  stage: release
  artifacts:
    paths:
      - ./*.tar.bz2
    expire_in: never
  rules:
    - if: $CI_COMMIT_TAG

.configure:
  before_script:
    - ./autogen.sh $CONFIGURE_FLAGS
  rules:
    # If there are changes to .po, never run. We also check
    # BEFORE_SHA to see if it is zeros, in which case we are
    # running on a manual trigger or scheduled pipeline. In
    # that case, changes resolves to true so we need to check
    # both.
    - if: '$CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000"'
      changes:
      - "po/*.po"
      when: never
    # Otherwise, run if previous stage didn't fail
    - when: on_success

.build:
  extends: .configure
  stage: build
  interruptible: true
  script:
    - make 2>&1 | tee build.log
    # Equivalent to -Werror using grep for deprecation warnings only on glib symbols,
    # which we care about since we set GLIB_VERSION_MIN_REQUIRED and GLIB_VERSION_MAX_ALLOWED
    # Subshell is necessary for logical negation to work because of set -e
    - '(! grep -E "warning: ''.*\b[gG]_.+\b.*''.+\[-Wdeprecated-declarations\]" build.log)'

.distcheck:
  extends: .configure
  script:
    # Projects should use AM_DISTCHECK_CONFIGURE_FLAGS instead of DISTCHECK_CONFIGURE_FLAGS
    # so that the flags set here are not overwritten
    - DISTCHECK_CONFIGURE_FLAGS="$CONFIGURE_FLAGS" make distcheck

.translation:
  rules:
    # If there are changes to .po, run this job
    - changes:
      - "po/*.po"
      when: always
    # Otherwise, never run
    - when: never
