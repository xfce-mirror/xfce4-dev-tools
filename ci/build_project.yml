image: xfce/xfce-build:latest

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Set overall pipeline rules to avoid duplicated pipelines
# https://docs.gitlab.com/ee/ci/yaml/index.html#exclude-jobs-with-rules-from-certain-pipelines
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

stages:
  - analysis
  - build
  - distcheck
  - release

clang-format:
  rules:
    # The job is only run for merge requests and if there is a .clang-format
    # file at the repository root
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - .clang-format
  stage: analysis
  allow_failure: true
  interruptible: true
  script:
    # The job fails if clang-format's analysis of the merge request diff produces
    # non-empty output. In this case, the suggested format corrections are displayed
    # in the job output and can be downloaded for one week.
    - 'git diff -U0 --no-color "$CI_MERGE_REQUEST_DIFF_BASE_SHA" | clang-format-diff -p1 > format-diff.log || {
         cat format-diff.log;
         exit 1;
       }'
  artifacts:
    paths:
      - format-diff.log
    when: on_failure
    expire_in: 1 week

translations:
  extends: .translation
  stage: build
  script:
    #  Could validate translations, but for now just pass
    - "true"

build:
  extends: .make
  stage: build
  interruptible: true
  script:
    - make 2>&1 | tee build.log
    # Equivalent to -Werror using grep for warnings other than deprecation, because setting
    # -Werror leads to configuration and link errors, at least with autotools
    # Subshells are necessary for logical negation to work because of set -e
    - '(! grep -P "warning:.+\[-W(?!deprecated-declarations).+\]" build.log)'
    # The same for deprecation warnings on glib symbols, which we care about since we set
    # GLIB_VERSION_MIN_REQUIRED and GLIB_VERSION_MAX_ALLOWED
    - '(! grep -E "warning: ''.*\b[gG]_.+\b.*''.+\[-Wdeprecated-declarations\]" build.log)'

distcheck:
  extends: .distcheck
  stage: distcheck
  interruptible: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
      # We have to reference .make rules to import the rules which skip build
      # when only po/*.po are modified
    - !reference [.make, rules]

release:
  extends: .distcheck
  stage: release
  artifacts:
    paths:
      - ./*.tar.bz2
    expire_in: never
  rules:
    - if: $CI_COMMIT_TAG

.make:
  before_script:
    # These warnings should be the same as in m4macros/xdt-features.m4
    - flags=$(echo -Wall -Wextra
                   -Wno-missing-field-initializers
                   -Wno-unused-parameter
                   -Wmissing-declarations
                   -Wmissing-noreturn -Wpointer-arith
                   -Wcast-align -Wformat -Wformat-security -Wformat-y2k
                   -Winit-self -Wmissing-include-dirs -Wundef
                   -Wredundant-decls -Wshadow)
    # Warnings we really want to be errors and/or C/C++ specific
    - CFLAGS=$(echo $flags
                    -Werror=return-type -Werror=implicit-function-declaration
                    -Wnested-externs -Wold-style-definition)
    - CXXFLAGS="$flags -Werror=return-type"
    - ./autogen.sh
  rules:
    # If there are changes to .po, never run. We also check
    # BEFORE_SHA to see if it is zeros, in which case we are
    # running on a manual trigger or scheduled pipeline. In
    # that case, changes resolves to true so we need to check
    # both.
    - if: '$CI_COMMIT_BEFORE_SHA != "0000000000000000000000000000000000000000"'
      changes:
      - "po/*.po"
      when: never
    # Otherwise, always run
    - when: always

.distcheck:
  extends: .make
  script:
    - make distcheck

.translation:
  rules:
    # If there are changes to .po, run this job
    - changes:
      - "po/*.po"
      when: always
    # Otherwise, never run
    - when: never
